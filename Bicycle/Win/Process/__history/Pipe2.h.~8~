#ifdef _MSC_VER
  #pragma once
#endif
//---------------------------------------------------------------------------
#ifndef Pipe2H
#define Pipe2H
//---------------------------------------------------------------------------
#include "Global.h"
#include "SystemException.h"
#include "NonCopyable.h"
#include "IODevice.h"
//---------------------------------------------------------------------------
namespace Bicycle
{
//---------------------------------------------------------------------------
//   Server  &  Client Pipes
//---------------------------------------------------------------------------
class ServerPipe2:  public IODevice,private NonCopyable
{
public:
  ServerPipe2(const tstring& name= tstring());
  virtual ~ServerPipe2();

  void create();
  void connect();

  HANDLE handle()const;
  bool isValide()const;
  void disconnect(ulong& errorCode);
  void close();

  tstring name()const;
  void setName(const tstring& name);

  void setOpenMode(ulong mode);
  void setPipeMode(ulong mode);
	void setBufferSize(ulong size);

	virtual ulong read(char* data, ulong size, ulong& errorCode){return 0;};
	virtual ulong write(const char* data, ulong size, ulong& errorCode){return 0;};
	virtual void checkErrorCode(ulong code) const=0{};

protected:
  OVERLAPPED& overlapped();// used in friends PipeReader & PipeWriter
  friend class PipeReader;
  friend class PipeWriter;

private:
  tstring name_;
  ulong openMode_;
  ulong pipeMode_;
  ulong maxInstances_;
  ulong	bufferSize_;
  ulong defaultTimeOut_;

  HANDLE handle_;
  OVERLAPPED overlapped_;
};
//---------------------------------------------------------------------------
class ClientPipe2: private NonCopyable
{
public:
  ClientPipe2(const tstring& name= tstring());
  virtual ~ClientPipe2();

  void open();

  HANDLE handle()const;
  bool isValide()const;
  void close();

  tstring name()const;
  void setName(const tstring& name);

  void setDesiredAccess(ulong access);
  void setSharedMode(ulong mode);
  void setFlagsAndAttributes(ulong flagsAndAttr);

private:
  tstring name_;
  ulong desiredAccess_;
  ulong sharedMode_;
  ulong flagsAndAttributes_;

  HANDLE handle_;
};
//---------------------------------------------------------------------------
//    PipeReader  &  PipeWriter
//---------------------------------------------------------------------------
class PipeReader: private NonCopyable
{
public:
  PipeReader(ServerPipe2* pipe= NULL);
  virtual ~PipeReader();

  void setPipe(ServerPipe2* pipe);
  void setTimeOut(ulong msecs);
  ulong read(char* data, ulong size, ulong& errorCode);

private:
  ServerPipe2* pipe_;
  ulong  timeOut_;
};
//---------------------------------------------------------------------------
class PipeWriter: private NonCopyable
{
public:
  PipeWriter(ServerPipe2* pipe= NULL);
  virtual ~PipeWriter();

  void setPipe(ServerPipe2* pipe);
  void setTimeOut(ulong msecs);

  ulong write(const char* data, ulong size, ulong& errorCode);
private:
  ServerPipe2* pipe_;
  ulong timeOut_;
};
//---------------------------------------------------------------------------
}
//---------------------------------------------------------------------------
#endif
